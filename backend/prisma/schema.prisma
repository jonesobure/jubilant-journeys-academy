// prisma/schema.prisma â€” MariaDB (provider = "mysql")

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ===== Enums =====
enum Role {
  ADMIN
  SECRETARY
  TEACHER
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REVERSED
}

enum PaymentSource {
  API
  MANUAL
}

enum InvoiceStatus {
  DRAFT
  SENT
  PARTIALLY_PAID
  PAID
  VOID
}

enum AdjustmentType {
  SCHOLARSHIP
  DISCOUNT
  WAIVER
  WRITE_OFF
}

enum FeeItemCategory {
  TUITION
  GENERAL_FUND
  OTHER
}

enum Term {
  TERM1
  TERM2
  TERM3
}

// ===== Models =====
model User {
  id                 String          @id @default(cuid())
  name               String
  email              String?         @unique
  phone              String?         @unique
  passwordHash       String
  role               Role
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  teacherAssignments TeacherAssignment[]
  createdPayments    Payment[]       @relation("PaymentCreatedBy")
  grantedAdjustments FeeAdjustment[] @relation("AdjustmentGrantedBy")

  @@index([role])
}

model Class {
  id                 String   @id @default(cuid())
  level              String
  stream             String?
  code               String   @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  students           Student[]
  teacherAssignments TeacherAssignment[]
  feeSchedules       FeeSchedule[]   // <-- ADD THIS LINE

  @@index([level, stream])
}

model TeacherAssignment {
  id        String   @id @default(cuid())
  teacherId String
  classId   String
  fromDate  DateTime @default(now())
  toDate    DateTime?

  teacher   User     @relation(fields: [teacherId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])

  @@unique([teacherId, classId, fromDate], name: "teacher_class_from_unique")
  @@index([classId, toDate])
}

model Student {
  id            String   @id @default(cuid())
  admissionNo   String   @unique
  firstName     String
  lastName      String
  guardianName  String?
  guardianPhone String
  altPhone      String?
  admittedAt    DateTime @default(now())
  isActive      Boolean  @default(true)

  classId       String?
  class         Class?   @relation(fields: [classId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  invoices      Invoice[]
  payments      Payment[]
  schedules     FeeSchedule[]
  adjustments   FeeAdjustment[]

  @@index([classId])
  @@index([guardianPhone])
}

model SchoolTerm {
  id          String   @id @default(cuid())
  year        Int
  term        Term
  startsAt    DateTime
  endsAt      DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoices    Invoice[]
  payments    Payment[]
  schedules   FeeSchedule[]
  adjustments FeeAdjustment[]

  @@unique([year, term], name: "year_term_unique")
  @@index([startsAt, endsAt])
}

// Fee schedule can be per class (default) or per student (override)
model FeeSchedule {
  id          String    @id @default(cuid())
  termId      String
  classId     String?
  studentId   String?
  totalAmount Decimal   @db.Decimal(12, 2)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  term        SchoolTerm @relation(fields: [termId], references: [id])
  class       Class?     @relation(fields: [classId], references: [id])
  student     Student?   @relation(fields: [studentId], references: [id])
  items       FeeScheduleItem[]

  @@index([termId, classId])
  @@index([termId, studentId])
}

model FeeScheduleItem {
  id          String          @id @default(cuid())
  scheduleId  String
  category    FeeItemCategory
  description String
  amount      Decimal         @db.Decimal(12, 2)

  schedule    FeeSchedule     @relation(fields: [scheduleId], references: [id])
}

model Invoice {
  id        String        @id @default(cuid())
  studentId String
  termId    String
  number    String        @unique
  status    InvoiceStatus @default(DRAFT)
  dueDate   DateTime?
  toPhone   String
  notes     String?

  subtotal  Decimal       @db.Decimal(12, 2)
  total     Decimal       @db.Decimal(12, 2)
  currency  String        @default("KES")

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  sentAt    DateTime?

  student   Student       @relation(fields: [studentId], references: [id])
  term      SchoolTerm    @relation(fields: [termId], references: [id])
  items     InvoiceItem[]
  payments  Payment[]

  @@index([studentId, termId])
  @@index([status, dueDate])
}

model InvoiceItem {
  id          String          @id @default(cuid())
  invoiceId   String
  category    FeeItemCategory
  description String
  amount      Decimal         @db.Decimal(12, 2)

  invoice     Invoice         @relation(fields: [invoiceId], references: [id])
}

model Payment {
  id             String         @id @default(cuid())
  studentId      String
  termId         String?
  invoiceId      String?
  amount         Decimal        @db.Decimal(12, 2)
  currency       String         @default("KES")
  status         PaymentStatus  @default(PENDING)
  source         PaymentSource  @default(API)
  method         String
  provider       String?
  transactionRef String?
  dedupeKey      String?        @unique
  paidAt         DateTime       @default(now())
  createdAt      DateTime       @default(now())
  createdById    String?

  student        Student        @relation(fields: [studentId], references: [id])
  term           SchoolTerm?    @relation(fields: [termId], references: [id])
  invoice        Invoice?       @relation(fields: [invoiceId], references: [id])
  createdBy      User?          @relation("PaymentCreatedBy", fields: [createdById], references: [id])

  @@index([studentId, paidAt])
  @@index([method, status, paidAt])
  @@index([transactionRef])
  @@index([termId])
  @@index([invoiceId])
  @@unique([provider, transactionRef], name: "provider_txnref_unique")
}

model FeeAdjustment {
  id          String         @id @default(cuid())
  studentId   String
  termId      String
  type        AdjustmentType
  amount      Decimal        @db.Decimal(12, 2)
  reason      String?
  grantedById String
  grantedAt   DateTime       @default(now())

  student     Student     @relation(fields: [studentId], references: [id])
  term        SchoolTerm  @relation(fields: [termId], references: [id])
  grantedBy   User        @relation("AdjustmentGrantedBy", fields: [grantedById], references: [id])

  @@index([studentId, termId, type])
}

model OutboundSms {
  id          String   @id @default(cuid())
  toPhone     String
  body        String
  relatedType String?
  relatedId   String?
  status      String   @default("QUEUED")
  error       String?
  sentAt      DateTime?
  createdAt   DateTime @default(now())

  @@index([toPhone, status])
}
